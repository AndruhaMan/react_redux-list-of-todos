{"version":3,"sources":["types/SortingStatus.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortingStatus","actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","All","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","className","map","id","title","completed","onClick","handleShowButton","TodoFilter","onQueryChange","newQuery","filterActions","onChange","event","target","value","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","catch","href","email","name","App","isLoading","setIsLoading","filteredTodos","useMemo","sortingStatus","serachingQuery","trim","toLowerCase","includes","filterTodos","fetchedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4bf7e0b.chunk.js","sourcesContent":["export enum SortingStatus {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { SortingStatus } from '../types/SortingStatus';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: SortingStatus;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: SortingStatus): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: SortingStatus,\n};\ntype Action = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: SortingStatus.All,\n  },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        query: action.payload,\n        status: state.status,\n      };\n    case 'filter/SET_STATUS':\n      return {\n        query: state.query,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const handleShowButton = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          return (\n            <tr data-cy=\"todo\" key={id}>\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleShowButton(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={id !== currentTodo?.id\n                        ? (\n                          'far fa-eye'\n                        )\n                        : (\n                          'far fa-eye-slash'\n                        )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { SortingStatus } from '../../types/SortingStatus';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const onStatusChange = (status: SortingStatus) => (\n    dispatch(filterActions.setStatus(status))\n  );\n\n  const onQueryChange = (newQuery: string) => (\n    dispatch(filterActions.setQuery(newQuery))\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              onStatusChange(event.target.value as SortingStatus);\n            }}\n          >\n            <option value={SortingStatus.All}>All</option>\n            <option value={SortingStatus.Active}>Active</option>\n            <option value={SortingStatus.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (!currentTodo) {\n      return;\n    }\n\n    getUser(currentTodo.userId)\n      .then(setUser)\n      .catch();\n  }, []);\n\n  const handleTodoClose = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? (\n          <Loader />\n        )\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleTodoClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                {' by '}\n\n                {user && (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortingStatus } from './types/SortingStatus';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nfunction filterTodos(todos: Todo[], sortingStatus: string, query: string) {\n  const serachingQuery = query.trim().toLowerCase();\n  const todoWithQuery = todos.filter(todo => (\n    todo.title.toLowerCase().includes(serachingQuery)\n  ));\n\n  return todoWithQuery.filter(todo => {\n    switch (sortingStatus) {\n      case SortingStatus.Active:\n        return !todo.completed;\n\n      case SortingStatus.Completed:\n        return todo.completed;\n\n      default:\n        return true;\n    }\n  });\n}\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const filteredTodos = useMemo(() => {\n    return filterTodos(todos, status, query);\n  }, [todos, status, query]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(fetchedTodos => dispatch(todosActions.setTodos(fetchedTodos)))\n      .then(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}